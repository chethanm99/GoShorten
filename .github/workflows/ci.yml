---

name: CI - Build and Scan

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: go-url-shortner

jobs:
  build_and_scan:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: --name redis-smoke-test

    permissions:
      contents: read
      security-events: write
      packages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Download and Vendor Go modules
        working-directory: app
        run: |
          echo "Downloading go modules"
          go mod download

      - name: Cache go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-mod-${{ hashfiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Run Vet and Generate Coverage
        working-directory: app
        run: |
          echo "Running go vet for static analysis"
          go vet ./...

          echo "Running tests and generating cover profile"
          go test -coverprofile=coverage.out ./... -v

      - name: Run tests
        working-directory: app
        run: go test ./... -v

      - name: Create an .env from .env.example
        run: |
          if [ -f .env.example ]; then cp .env.example .env; fi

      - name: Build Docker image and tag with SHA
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export DOCKER_BUILDKIT=1
          docker build -t "${{ env.IMAGE_NAME}}:${IMAGE_TAG}" -t "${{ env.IMAGE_NAME }}:latest" .

      - name: Run Trivy Scan (JSON + SARIF)
        id: trivy_scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          IMAGE_REF="${{ env.IMAGE_NAME }}:${{ github.sha }}"

          /usr/local/bin/trivy image \
            --format sarif \
            --output trivy-results.sarif \
            --severity CRITICAL,HIGH \
            "${IMAGE_REF}" || true

          /usr/local/bin/trivy image \
            --format json \
            --output trivy-results.json \
            --severity CRITICAL,HIGH \
            "${IMAGE_REF}" || true

          /usr/local/bin/trivy image \
            --format cyclonedx \
            --output trivy-sbom-cyclonedx.json \
            "${IMAGE_REF}" || true

          /usr/local/bin/trviy image \
            --format spdx-json \
            --output trivy-sbom-spdx.json \
            "${IMAGE_REF}" || true

          if [ -s trivy-results.json ]; then
            if jq -e 'if (.Results | length > 0) then .Results[].Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH") else empty end' trivy-results.json >/dev/null 2>&1; then
              echo "::error::CRITICAL or HIGH vulnerabilities found. Failing quality gate."
              exit 1
            else
               echo "No CRITICAL or HIGH vulnerabilities found. Security gate passed."
            fi
          else
             echo "Trivy JSON file is empty or missing, assuming scan passed (no vulnerabilities found)."
          fi

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to registry
        id: push_image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          REPO_LOWERCASE="${{ github.repository }}"
          REPO_LOWERCASE="${REPO_LOWERCASE,,}"
          IMAGE_URI_TAG="ghcr.io/${REPO_LOWERCASE}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          docker tag "${{ env.IMAGE_NAME }}:${IMAGE_TAG}" "${IMAGE_URI_TAG}"
          IMAGE_DIGEST_REF=$(docker push "${IMAGE_URI_TAG}" | tail -n 1)

          echo "IMAGE_DIGEST_REF=${IMAGE_DIGEST_REF}" >> $GITHUB_ENV

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Keyless Sign the images with Cosign (keyless)
        if: steps.trivy_scan.outputs.vuln_found == 'false'
        env:
          IMAGE_DIGEST_REF: ${{ env.IMAGE_DIGEST_REF }}
        run:
          export COSIGN_EXPERIMENTAL=true
          cosign sign "$IMAGE_DIGEST_REF"

      - name: Verify image signature (Keyless mode)
        if: always() && steps.trivy_scan.outputs.vuln_found == 'false'
        env:
          IMAGE_DIGEST_REF: ${{ env.IMAGE_DIGEST_REF }}
        run: |
          export COSIGN_EXPERIMENTAL=true
          echo "Verifying signature for $IMAGE_DIGEST_REF"

          cosign verify \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/ci.yml@${{ github.ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "$IMAGE_DIGEST_REF" | tee cosign-verify-output.txt

      - name: Check if SARIF file was created
        id: sarif_check
        if: always()
        run: |
          if [ -f trivy-results.sarif ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish SARIF to Github Code Scanning
        if: always() && steps.sarif_check.outputs.sarif_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy and Cosign artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-artifacts
          path: |
            trivy-results.sarif
            trivy-results.json
            trivy-sbom-cyclonedx.json
            trivy-sbom-spdx.json
            cosign-verify-output.txt
            app/coverage.out

  smoke_test:
    needs: build_and_scan
    runs-on: ubuntu-latest
    if: needs.build_and_scan.outputs.vuln_found != 'true'

    steps:
      - name: Login into GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup Redis network and service
        run: |
          docker network create job-network

          docker run -d --name redis \
            --network job-network \
            -p 6379:6379 \
            redis:6-alpine

          sleep 5

      - name: Smoke test (Integrated with Pull and Run)
        run: |
          FULL_REPO_PATH="${{ github.repository }}"
          FULL_REPO_PATH_LOWER="${FULL_REPO_PATH,,}"
          GHCR_URI="ghcr.io/${FULL_REPO_PATH_LOWER}/go-url-shortner"
          IMAGE_REF="${GHCR_URI}:${{ github.sha }}"

          echo "Attempting authenticated pull from: ${IMAGE_REF}"
          docker pull "${IMAGE_REF}"

          docker run -d --name smoke_test \
            --network job-network \
            -p 8080:8080 \
            -e DB_ADDR=redis:6379 \
            "${IMAGE_REF}"

          for i in {1..15}; do
            if curl -fsS http://localhost:8080/healthz; then
              echo "OK" && break
            fi
            sleep 2
          done

          docker logs smoke_test
          EXIT_CODE=$(docker inspect --format='{{.State.ExitCode}}' smoke_test)
          docker stop smoke_test || true
          docker rm smoke_test || true

          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "Smoke test container failed with exit code $EXIT_CODE"
            exit 1
          fi