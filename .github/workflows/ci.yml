---

name: CI - Build and Scan

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: go-url-shortner

jobs:
  build_and_scan:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: --name redis-smoke-test

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Run tests
        working-directory: app
        run: go test ./... -v

      - name: Create an .env from .env.example
        run: |
          if [ -f .env.example ]; then cp .env.example .env; fi

      - name: Build Docker image and tag with SHA
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export DOCKER_BUILDKIT=1
          docker build -t "${{ env.IMAGE_NAME}}:${IMAGE_TAG}" -t "${{ env.IMAGE_NAME }}:latest" .

      - name: Run Trivy Scan (JSON + SARIF)
        id: trivy_scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          IMAGE_REF="${{ env.IMAGE_NAME }}:${{ github.sha }}"

          /usr/local/bin/trivy image \
            --format sarif \
            --output trivy-results.sarif \
            --severity CRITICAL,HIGH \
            "${IMAGE_REF}" || true

          /usr/local/bin/trivy image \
            --format json \
            --output trivy-results.json \
            --severity CRITICAL,HIGH \
            "${IMAGE_REF}" || true

          if jq -e '...' trivy-results.json >/dev/null 2>&1; then
            echo"::error::CRITICAL or HIGH vulnerabilities found. Failing quality gate."
            exit 1
          fi

      - name: Publish SARIF to Github Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy Scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: |
            trivy-results.sarif
            trivy-results.json

  smoke_test:
    needs: build_and_scan
    runs-on: ubuntu-lates
    if: needs.build_and_scan.outputs.vuln_found != 'true'

    container:
      image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
    env:
        DB_ADDR: redis:6379
      
    services:
      redis:
        image: redis:6-alpine
        ports:
         - 6379:6379
 
    steps:
      - name: Smoke test image
        run: |
          echo "Starting application health check..."
          for i in {1...15}
          do
            if curl -fsS http://localhost/8080/health; then
              echo "Smoke test PASSED. Application is ready."
              exit 0
            fi
            echo "Attempt $i: App not ready yet. Waiting 2 seconds..."
            sleep 2
          done

          echo "::error::Smoke test FAILED: Application did not become ready after 30 seconds."
          exit 1
